openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'CODEMEN - ECART'
  description: 'This is a multivendor ecommerce website.Where we have implemented different types of industry standard procedure.'
  contact:
    name: CODEMEN
    url: https://codemen@@@.com
    email: support@codemen.com
servers:
  - description: Dev
    url: 'http://localhost:4000/api/v1'

  - description: Test
    url: 'http://testing.com/api/v1'

  - description: Prod
    url: 'http://production.com/api/v1'
tags:
  - name: Product
    description: Products Endpoints ( public + private )
  - name: Cart
    description: Cart Endpoints (private)
  - name: Order
    description: Order Endpoints (private)
  - name: Wishlist
    description: Wishlist Endpoints (private)
paths:
  
  '/products':
    get:
      tags: [Product]
      description: Get Many Products 
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: Return a list of products
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                              title:
                                type: string
                                example: Full Seleve Shirt
                              category:
                                type: number
                                example: 02
                              thumbnail:
                                type: string
                                format: url
                                example: https://s3.aws.example.com/23nds
                              summary:
                                type: string
                                format: text
                                example: Summary of the products
                              description:
                                type: string
                                format: text
                                example: Description of the               products
                              price:
                                type: number
                                example: 350.07
                              quantity:
                                type: number
                                example: 200
                              discount_price:
                                type: number
                                example: 350.07
                        - $ref: '#/components/schemas/Timestamp'  
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/products?page=2&limit=10'
                      next:
                        type: string
                        format: url
                        example: '/products?page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: 'products?page=1&limit=10'
        '500':
          '$ref': '#/components/responses/500'
    post:
      operationId: createPost
      security:
        - bearerAuth: []
      tags: [Product]
      description: Add A New Product
      requestBody:
        description: To add a new product vendor must need to provide valid data
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Full Seleve Shirt
                category:
                  type: number
                  example: 02
                thumbnail:
                  type: string
                  format: url
                  example: https://s3.aws.example.com/23nds
                summary:
                  type: string
                  format: text
                  example: Summary of the products
                description:
                  type: string
                  format: text
                  example: Description of the products
                price:
                  type: number
                  example: 350.07
                quantity:
                  type: number
                  example: 200
                discount_price:
                  type: number
                  example: 350.07
                
              required: [title, category, thumbnail, summary,description,price,quantity, discount_price]
      responses:
        '201':
          description: Successfully add a new product.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProductCreateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/products/{id}':
    get:
      tags: [Product]
      description: Fetch A Single Product
      parameters:
        - $ref: '#/components/parameters/idPathParam'
        - in: query
          name: expand
          description: expand vendor and  query object
          schema:
            type: string
            example: 'vendor, query'
      responses:
        '200':
          description: 'Single Product View'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Product'
                      - type: object
                        properties:
                          seller:
                            $ref: '#/components/schemas/SellerDTO'
                      - type: object
                        properties:
                          queries:
                            type: array
                            items:
                              $ref: '#/components/schemas/ProductQuery'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/products/1'
                      seller:
                        type: string
                        example: '/seller/1'
                      
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: []
      tags: [Product]
      description: Update Entire Product
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Full Seleve Shirt
                category:
                  type: number
                  example: 02
                thumbnail:
                  type: string
                  format: url
                  example: https://s3.aws.example.com/23nds
                summary:
                  type: string
                  format: text
                  example: Summary of the products
                description:
                  type: string
                  format: text
                  example: Description of the products
                price:
                  type: number
                  example: 350.07
                quantity:
                  type: number
                  example: 200
                discount_price:
                  type: number
                  example: 350.07
                
              required: [title,]
              
      responses:
        '200':
          description: 'Successfully Updated The Product'
          content: 
            'application/json':
              schema:
                $ref: '#/components/schemas/ProductUpdateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - bearerAuth: []
      tags: [Product]
      description: Update Product Details Partially
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Full Seleve Shirt
                category:
                  type: number
                  example: 02
                thumbnail:
                  type: string
                  format: url
                  example: https://s3.aws.example.com/23nds
                summary:
                  type: string
                  format: text
                  example: Summary of the products
                description:
                  type: string
                  format: text
                  example: Description of the products
                price:
                  type: number
                  example: 350.07
                quantity:
                  type: number
                  example: 200
                discount_price:
                  type: number
                  example: 350.07
                
              required: [title,]
              
      responses:
        '200':
          description: 'Successfully Updated The Product'
          content: 
            'application/json':
              schema:
                $ref: '#/components/schemas/ProductUpdateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags: [Product]
      description: Delete A Product By Id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: 'Product Deleted Successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/carts':
    get:
      operationId: getCart
      security:
        - bearerAuth: []
      tags: [Cart]
      description: Retrive all published articles
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: Return a list of articles
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            title:
                              type: string
                              example: first article
                            cover:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/124.jpg
                            
                            link:
                              type: string
                              format: url
                              example: '/articles/1'
                          required: [id, title, author]
                        - $ref: '#/components/schemas/Timestamp'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/articles?page=2&limit=10'
                      next:
                        type: string
                        format: url
                        example: '/articles?page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: '/articles?page=1&limit=10'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
    post:
      operationId: createPost
      security:
        - bearerAuth: []
      tags: [Cart]
      description: Add A New Product
      requestBody:
        description: To add a new product vendor must need to provide valid data
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Full Seleve Shirt
                category:
                  type: number
                  example: 02
                thumbnail:
                  type: string
                  format: url
                  example: https://s3.aws.example.com/23nds
                summary:
                  type: string
                  format: text
                  example: Summary of the products
                description:
                  type: string
                  format: text
                  example: Description of the products
                price:
                  type: number
                  example: 350.07
                quantity:
                  type: number
                  example: 200
                discount_price:
                  type: number
                  example: 350.07
                
              required: [title, category, thumbnail, summary,description,price,quantity, discount_price]
      responses:
        '201':
          description: Successfully add a new article.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleCreateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/carts/{id}':
    patch:
      security:
        - bearerAuth: []
      tags: [Cart]
      description: Partially update an article
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  format: url
                  example: 'https://s3.aws.myblog.com/221ddw34'
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
      responses:
        '200':
          description: 'Successfully Updated'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleUpdateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags: [Cart]
      description: Delete A Product From Cart
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: 'Product deleted successfully from cart'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/orders':
    get:
      operationId: getOrders
      security:
        - bearerAuth: []
      tags: [Order]
      description: Retrive all published articles
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: Return a list of articles
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            title:
                              type: string
                              example: first article
                            cover:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/124.jpg
                            
                            link:
                              type: string
                              format: url
                              example: '/articles/1'
                          required: [id, title, author]
                        - $ref: '#/components/schemas/Timestamp'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/articles?page=2&limit=10'
                      next:
                        type: string
                        format: url
                        example: '/articles?page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: '/articles?page=1&limit=10'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
    post:
      operationId: createPost
      security:
        - bearerAuth: []
      tags: [Order]
      description: Add A New Product
      requestBody:
        description: To add a new product vendor must need to provide valid data
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Full Seleve Shirt
                category:
                  type: number
                  example: 02
                thumbnail:
                  type: string
                  format: url
                  example: https://s3.aws.example.com/23nds
                summary:
                  type: string
                  format: text
                  example: Summary of the products
                description:
                  type: string
                  format: text
                  example: Description of the products
                price:
                  type: number
                  example: 350.07
                quantity:
                  type: number
                  example: 200
                discount_price:
                  type: number
                  example: 350.07
                
              required: [title, category, thumbnail, summary,description,price,quantity, discount_price]
      responses:
        '201':
          description: Successfully add a new article.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleCreateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/orders/{id}':
    get:
      operationId: getSpecificOrder
      security:
        - bearerAuth: []
      tags: [Order]
      description: Retrive all published articles
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: Return a list of articles
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            title:
                              type: string
                              example: first article
                            cover:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/124.jpg
                           
                            link:
                              type: string
                              format: url
                              example: '/articles/1'
                          required: [id, title, author]
                        - $ref: '#/components/schemas/Timestamp'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/articles?page=2&limit=10'
                      next:
                        type: string
                        format: url
                        example: '/articles?page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: '/articles?page=1&limit=10'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'   
    patch:
      security:
        - bearerAuth: []
      tags: [Order]
      description: Partially update an article
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  format: url
                  example: 'https://s3.aws.myblog.com/221ddw34'
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
      responses:
        '200':
          description: 'Successfully Updated'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleUpdateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/wishlists':
    get:
      operationId: getWishList
      security:
        - bearerAuth: []
      tags: [Wishlist]
      description: Fetch All Wishlists Product
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: Return a list of wishlists product
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/wishlists?page=2&limit=10'
                      next:
                        type: string
                        format: url
                        example: '/wishlists?page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: '/wishlists?page=1&limit=10'
                      productDetails:
                        type: string
                        format: url
                        example: '/products/2'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
    post:
      operationId: addProduct
      security:
        - bearerAuth: []
      tags: [Wishlist]
      description: Add A New Product To Wishlist
      requestBody:
        description: To add a new product to wishlist provide correct info
        content:
          'application/json':
            schema:
              type: object
              properties:
                productId:
                  type: number
                  example: 45
                customerId:
                  type: number
                  example: 02

              required: [productId,customerId]
      responses:
        '201':
          description: Successfully add a new product to wishlists.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WishlistAddDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/wishlists/{id}':
    delete:
      security:
        - bearerAuth: []
      tags: [Wishlist]
      description: Delete a product from wishlist by id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: 'Product deleted from wishlist successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      allOf:
       - type: object
         properties:
          title:
            type: string
            example: Full Seleve Shirt
          category:
            type: number
            example: 02
          thumbnail:
            type: string
            format: url
            example: https://s3.aws.example.com/23nds
          summary:
            type: string
            format: text
            example: Summary of the products
          description:
            type: string
            format: text
            example: Description of the products
          price:
            type: number
            example: 350.07
          quantity:
            type: number
            example: 200
          discount_price:
            type: number
            example: 350.07   
       - $ref: '#/components/schemas/Timestamp'
      required: [title, category, thumbnail, summary,description,price,quantity, discount_price]
    ProductQuery:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            customerId:
              type: integer
              format: int32
              example: 1
            productId:
              type: integer
              format: int32
              example: 1
            query:
              type: string
              format: text
              example: What is the shelf life?
            answer:
              type: string
              format: text
              example: 6 months
            
          required: [id, authorId, articleId, body, status]
        - $ref: '#/components/schemas/Timestamp'
    ProductCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: 'Product add successfully'
        data:
          $ref: '#/components/schemas/Product'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: '/products/1'
            seller:
              type: string
              format: url
              example: '/users/seller/1'
    ProductUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: 'Product Update successfully'
        data:
          $ref: '#/components/schemas/Product'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: '/products/1'
            seller:
              type: string
              format: url
              example: '/users/seller/1'
    WishlistAddDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: 'Product add to wishlist successfully.'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: '/wishlist'  
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [createdAt, updatedAt]
    SellerDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'John Doe'
      required: [id, name]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
    
  responses:
    '500':
      description: 'Internal Server Error'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: We are sorry for the inconvenience. Please try again later
    '400':
      description: 'Bad Request'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    '401':
      description: Unauthorized
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    '404':
      description: Resource Not Found
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      required: true
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: maximum items to be returned
      required: true
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum: [asc, dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort key
      schema:
        type: string
        example: updatedAt
    searchParam:
      in: query
      name: search
      description: Search term
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: Product ID
      schema:
        type: string
        example: '64d268cdeef8c84bb18912db'
